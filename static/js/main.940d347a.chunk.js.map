{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.940d347a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cointainers\":\"Cards_cointainers__2Kj7k\",\"card\":\"Cards_card__3FXom\",\"infected\":\"Cards_infected__3YxbA\",\"recovered\":\"Cards_recovered__3RfEa\",\"deaths\":\"Cards_deaths__1QP_g\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return (<h1>Loading...</h1>);\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of covid-19.</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}xs={12} md={3}className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp\r\n                            start={0}\r\n                            end={recovered.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                        />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Recoveries from covid-19.</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card}xs={12} md={3}className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp\r\n                            start={0}\r\n                            end={deaths.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                        />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Deaths caused by covid-19.</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid> \r\n        </div>\r\n    )\r\n}\r\nexport default Cards","import axios from 'axios';\r\nconst url = 'https://covid19.mathdro.id/api';\r\nexport const fetchData=async(country)=>{\r\n    let changeableUrl = url;\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try {\r\n        const {data: {confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeableUrl);\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }\r\n        return modifiedData;;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nexport const fetchDailyData = async()=>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate\r\n        })) \r\n        // Returning Object\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nexport const fetchCountries = async()=>{\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n        return countries.map((country )=>country.name)\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({data:{confirmed,recovered,deaths},country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        // console.log(dailyData)\r\n        fetchAPI();\r\n    },[]);\r\n    const lineChart = (\r\n        dailyData.length !== 0 ? (<Line\r\n            data ={{\r\n                labels:dailyData.map(({date})=> date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed})=> confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                },{\r\n                    data: dailyData.map(({deaths})=> deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor:'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n        />):null\r\n        // If first data is not available that means none of the data is available\r\n    );\r\n    const barChart = (\r\n        confirmed\r\n        ?(\r\n            <Bar\r\n                data={{\r\n                    labels:['Infected','Recovered','Deaths'],\r\n                    datasets:[{\r\n                        label: 'people',\r\n                        backgroundColor:['rgba(0,0,255,0.5)',\r\n                                        'rgba(0,255,0,0.5)',\r\n                                        'rgba(255, 0, 0, 0.5)'\r\n                                        ],\r\n                        data:[confirmed.value,recovered.value,deaths.value] \r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {display: false},\r\n                    title:{display:true,text:`Current state in ${country}`}\r\n                }}\r\n            />\r\n        ):null\r\n    );\r\n    //making code dynamic \r\n    //opening the object\r\n    return (\r\n        <div className={styles.container}>\r\n            {country?barChart:lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';    \r\nimport {fetchCountries} from '../../api';\r\n\r\nconst CountryPicker=({handleCountryChange})=>{\r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI = async()=>{\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]); \r\n\r\n    \r\n    return (\r\n        <FormControl  className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>  handleCountryChange(e.target.value) }>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i)=><option \r\n                key={i}\r\n                value={country}\r\n                >\r\n                    {country}\r\n                </option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker","import React from 'react';\n\nimport {Cards,Chart, CountryPicker} from './components'\nimport styles from './App.module.css'\nimport {fetchData} from './api'\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n\tstate={\t\t\t\t\n\t\t\t\t\t\t\t\t// sending data from here to cards\n\t\tdata:{},\n\t\tcountry:'',\n\t}\n\tasync componentDidMount () {\n\t\tconst fetchedData = await fetchData();\n\t\tthis.setState({data: fetchedData})\n\t}\n\t// Chossing country\n\thandleCountryChange = async(country)=>{\n\t\t// fetch the data\n\t\tconst fetchedData = await fetchData(country);\n\t\t// set the data\n\t\tthis.setState({data:fetchedData, country: country})\n\n\t}\n\trender() {\n\t\tconst {data,country}=this.state;\n\t\treturn(\n\t\t\t<div className=\"{styles.container}\">\n\t\t\t\t<img className={styles.image} src={coronaImage}alt= \"Covid-19\"/>\n\t\t\t\t<Cards data={data}/>\t\n\t\t\t\t{/* PASSING DATA AS PROPS TO CARD */}\n\t\t\t\t<CountryPicker handleCountryChange={this.handleCountryChange}/>\n\t\t\t\t<Chart data={data} country={country}/>\n\t\t\t</div>\n\t\t)\n\t}\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__GmEHO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3jSet\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__M15nN\",\"image\":\"App_image__3CxtG\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}